apiVersion: v1
kind: Template
metadata:
  name: gogs
labels:
  template: gogs
  group: gogs
metadata:
  annotations:
    description: Creates gogs
    iconClass: icon-gogs
    tags: gogs
  name: gogs
message: gogs.
parameters:
- description: Password for the Gogs user.
  displayName: Gogs Password
  value: password
  name: GOGS_PASSWORD
  required: true
- description: Username for PostgreSQL backend
  displayName: PostgreSQL User
  from: user[A-Z0-9]{3}
  generate: expression
  name: POSTGRESQL_USER
  required: true
- description: Password for Gogs Git Server PostgreSQL backend
  displayName: Gogs' PostgreSQL Password
  from: '[a-zA-Z0-9]{16}'
  generate: expression
  name: GOGS_POSTGRESQL_PASSWORD
  required: true
objects:
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      description: The Gogs server's http port
      service.alpha.openshift.io/dependencies: '[{"name": "postgresql-gogs", "namespace": "", "kind": "Service"}]'
      service.openshift.io/infrastructure: "true"
    labels:
      app: gogs
    name: gogs
  spec:
    ports:
    - name: web
      port: 3000
      protocol: TCP
      targetPort: 3000
    selector:
      app: gogs
      deploymentconfig: gogs
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: null
    name: postgresql-gogs
    labels:
      app: gogs
  spec:
    ports:
    - name: postgresql
      port: 5432
      protocol: TCP
      targetPort: 5432
    selector:
      app: gogs
      deploymentconfig: postgresql-gogs
    sessionAffinity: None
    type: ClusterIP
- apiVersion: v1
  kind: Route
  metadata:
    annotations:
      description: Route for gogs's http service.
    name: gogs
    labels:
      app: gogs
  spec:
    to:
      kind: Service
      name: gogs
- apiVersion: v1
  kind: ImageStream
  metadata:
    name: gogs
    labels:
      app: gogs
  spec:
    tags:
    - annotations:
        description: The Gogs git server docker image
        tags: gogs,go,golang
        version: "latest"
      from:
        kind: DockerImage
        name: openshiftdemos/gogs:latest
      importPolicy: {}
      name: "latest"
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    labels:
      app: gogs
    name: gogs
  spec:
    replicas: 1
    selector:
      app: gogs
      deploymentconfig: gogs
    strategy:
      type: Recreate
    template:
      metadata:
        labels:
          app: gogs
          deploymentconfig: gogs
      spec:
        containers:
        - image: " "
          imagePullPolicy: Always
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            httpGet:
              port: 3000
              path: /
            timeoutSeconds: 1
          name: gogs
          ports:
          - containerPort: 3000
            protocol: TCP
          resources:
            limits:
              memory: 512Mi
          terminationMessagePath: /dev/termination-log
          readinessProbe:
            failureThreshold: 3
            initialDelaySeconds: 15
            periodSeconds: 10
            successThreshold: 1
            httpGet:
              port: 3000
              path: /
            timeoutSeconds: 1
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
    triggers:
    - type: ConfigChange
    - imageChangeParams:
        automatic: true
        containerNames:
        - gogs
        from:
          kind: ImageStreamTag
          name: gogs:latest
      type: ImageChange
  status: {}
- apiVersion: v1
  kind: DeploymentConfig
  metadata:
    creationTimestamp: null
    labels:
      app: gogs
      deploymentconfig: postgresql-gogs
    name: postgresql-gogs
  spec:
    replicas: 1
    selector:
      app: gogs
      deploymentconfig: postgresql-gogs
    strategy:
      recreateParams:
        timeoutSeconds: 600
      resources: {}
      type: Recreate
    template:
      metadata:
        labels:
          app: gogs
          deploymentconfig: postgresql-gogs
      spec:
        containers:
        - env:
          - name: POSTGRESQL_USER
            value: ${POSTGRESQL_USER}
          - name: POSTGRESQL_PASSWORD
            value: ${GOGS_POSTGRESQL_PASSWORD}
          - name: POSTGRESQL_DATABASE
            value: gogs
          image: ' '
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            tcpSocket:
              port: 5432
            timeoutSeconds: 1
          name: postgresql
          ports:
          - containerPort: 5432
            protocol: TCP
          readinessProbe:
            exec:
              command:
              - /bin/sh
              - -i
              - -c
              - psql -h 127.0.0.1 -U $POSTGRESQL_USER -q -d $POSTGRESQL_DATABASE -c 'SELECT 1'
            failureThreshold: 3
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources:
            limits:
              memory: 256Mi
          securityContext:
            capabilities: {}
            privileged: false
          terminationMessagePath: /dev/termination-log
          volumeMounts:
          - mountPath: /var/lib/pgsql/data
            name: postgresql-data
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        securityContext: {}
        terminationGracePeriodSeconds: 30
        volumes:
        - emptyDir: {}
          name: postgresql-data
    triggers:
    - imageChangeParams:
        automatic: true
        containerNames:
        - postgresql
        from:
          kind: ImageStreamTag
          name: postgresql:9.5
          namespace: openshift
      type: ImageChange
    - type: ConfigChange
  status: {}
- apiVersion: v1
  kind: Pod
  metadata:
    name: install-gogs
    labels:
      app: gogs
      job: install-gogs
  spec:
    containers:
    - name: oc
      image: docker.io/openshiftdemos/oc
      command: ["/bin/bash",  "/tmp/installgogs.sh"]
      volumeMounts:
      - name: script-volume
        mountPath: /tmp/
      resources:
        limits:
          memory: 128Mi
      env:
      - name: GOGS_PASSWORD
        value: ${GOGS_PASSWORD}
    volumes:
      - name: script-volume
        configMap:
          name: gogs-install
          items:
          - key: installgogs.sh
            path: installgogs.sh
    restartPolicy: Never
- apiVersion: v1
  kind: ConfigMap
  metadata:
    name: gogs-install
  data:
    installgogs.sh: |
      #!/bin/bash

      set -x

      GOGSSVC=$(oc get svc gogs -o template --template='{{.spec.clusterIP}}')
      GOGSROUTE=$(oc get route gogs -o template --template='{{.spec.host}}')

      eval $(oc env dc/postgresql-gogs --list | grep -v \#)

      # postgres has a readiness probe, so checking if there is at least one
      # endpoint means postgres is alive and ready, so we can then attempt to install gogs
      # we're willing to wait 60 seconds for it, otherwise something is wrong.
      x=1
      oc get ep postgresql-gogs -o yaml | grep "\- addresses:"
      while [ ! $? -eq 0 ]
      do
        sleep 10
        x=$(( $x + 1 ))

        if [ $x -gt 100 ]
        then
          exit 255
        fi

        oc get ep postgresql-gogs -o yaml | grep "\- addresses:"
      done

      # now we wait for gogs to be ready in the same way
      x=1
      oc get ep gogs -o yaml | grep "\- addresses:"
      while [ ! $? -eq 0 ]
      do
        sleep 10
        x=$(( $x + 1 ))

        if [ $x -gt 100 ]
        then
          exit 255
        fi

        oc get ep gogs -o yaml | grep "\- addresses:"
      done

      # we might catch the router before it's been updated, so wait just a touch
      # more
      sleep 10

      # RETURN=$(curl -o /dev/null -sL -w "%{http_code}" http://$GOGSSVC:3000/install \
      # RETURN=$(curl -o /dev/null -sL -v http://$GOGSSVC:3000/install \
      RETURN=$(curl -o /dev/null -sL --post302 -w "%{http_code}" http://$GOGSSVC:3000/install \
      --form db_type=PostgreSQL \
      --form db_host=postgresql-gogs:5432 \
      --form db_user=$POSTGRESQL_USER \
      --form db_passwd=$POSTGRESQL_PASSWORD \
      --form db_name=gogs \
      --form ssl_mode=disable \
      --form db_path=data/gogs.db \
      --form "app_name=Gogs: Go Git Service" \
      --form repo_root_path=/home/gogs/gogs-repositories \
      --form run_user=gogs \
      --form domain=localhost \
      --form ssh_port=22 \
      --form http_port=3000 \
      --form app_url=http://${GOGSROUTE}/ \
      --form log_root_path=/opt/gogs/log \
      --form admin_name=gogs \
      --form admin_passwd=$GOGS_PASSWORD \
      --form admin_confirm_passwd=$GOGS_PASSWORD \
      --form admin_email=admin@gogs.com)

      if [ $RETURN != "200" ]
      then
        exit 255
      fi

      sleep 10

      # import github repository
      cat <<EOF > /tmp/data.json
      {
        "clone_addr": "https://github.com/OpenShiftDemos/openshift-tasks.git",
        "uid": 1,
        "repo_name": "openshift-tasks"
      }
      EOF

      # RETURN=$(curl -o /dev/null -sL -w "%{http_code}" -H "Content-Type: application/json" \
      # -u gogs:$GOGS_PASSWORD -X POST http://$GOGSSVC:3000/api/v1/repos/migrate -d @/tmp/data.json)

      # if [ $RETURN != "201" ]
      # then
      # exit 255
      # fi

      sleep 5

      # RETURN=$(curl -o /dev/null -sL -w "%{http_code}" -H "Content-Type: application/json" \
      # -u gogs:$GOGS_PASSWORD -X POST http://$GOGSSVC:3000/api/v1/repos/gogs/openshift-tasks/hooks -d @/tmp/data.json)

      # if [ $RETURN != "201" ]
      # then
      #  exit 255
      # fi
# SonarQube
